from django.db import models
from django.utils.text import slugify
import httpx
from django.contrib.auth.models import User
from PIL import Image
from io import BytesIO
from urllib.request import urlopen
from django.core import files
from django.urls import reverse
from datetime import timezone


# Create your models here.

class Genre(models.Model):
    comics = models.ForeignKey('Comic', on_delete=models.CASCADE)
    name = models.CharField(max_length=500)

    def __str__(self):
        return self.name


class Tag(models.Model):
    comics = models.ForeignKey('Comic', on_delete=models.CASCADE)
    name = models.CharField(max_length=500)

    def __str__(self):
        return self.name


class Comic(models.Model):
    user = models.ManyToManyField(User,  blank=True)
    title = models.CharField(max_length=5000, null=False, unique=True)
    description = models.TextField(blank=True)
    image = models.ImageField(upload_to='comics', blank=True)
    image_url = models.URLField(blank=True, max_length=100000)
    rating = models.DecimalField(
        max_digits=9, decimal_places=1, default=0)
    status = models.CharField(max_length=1000, blank=True)
    category = models.ManyToManyField(Tag, blank=True)
    genres = models.ManyToManyField(Genre, blank=True)
    updated = models.DateTimeField(auto_now=True)
    created = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        with httpx.Client() as s:
            if self.image == '' and self.image_url != '':
                resp = s.get(self.image_url)
                pb = BytesIO()
                pb.write(resp.content)
                pb.flush()
                file_name = self.image_url.split("/")[-1]
                self.image.save(file_name, files.File(pb), save=False)
            return super().save(*args, **kwargs)

    def save(self, *args, **kwargs):
        if self.image == '' and self.image_url != '':
            resp = Image.open(urlopen(self.image_url))
            pb = BytesIO()
            pb.write(resp.content)
            pb.flush()
            file_name = self.image_url.split("/")[-1]
            self.image.save(file_name, files.File(pb), save=False)
        return super().save(*args, **kwargs)

    @property
    def created_dynamic(self):
        now = timezone.now()
        return now


class Image(models.Model):
    chapters = models.ForeignKey('Chapter', on_delete=models.CASCADE)
    images = models.ImageField(upload_to='comics/chapters', blank=True)
    images_url = models.URLField(blank=False, max_length=10000000)

    def __str__(self):
        return str(self.images)


class Chapter(models.Model):
    comics = models.ForeignKey(Comic, on_delete=models.CASCADE)
    name = models.CharField(max_length=100000)
    files = models.ManyToManyField(Image, blank=False)
    updated = models.DateTimeField(auto_now=True)
    created = models.DateTimeField(auto_now_add=True, null=True)
    slug = models.SlugField(null=True, unique=True, max_length=100000)

    class Meta:
        ordering = ['-updated']

    def get_absolute_url(self):
        return reverse('genres', args=[self.slug])

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            self.name.replace(" ", "")
            self.slug = slugify(self.name)
        return super().save(*args, **kwargs)

    @property
    def created_dynamic(self):
        now = timezone.now()
        return now


RATE_CHOICES = [
    (1, '1 - Trash'),
    (2, '2 - Horrible'),
    (3, '3 - Terrible'),
    (4, '4 - Bad'),
    (5, '5 - OK'),
    (6, '6 - Watchable'),
    (7, '7 - Good'),
    (8, '8 - Very Good'),
    (9, '9 - Perfect'),
    (10, '10 - Master Piece'),
]


class Review(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True)
    date = models.DateTimeField(auto_now_add=True)
    text = models.TextField(max_length=3000, blank=True)
    rate = models.PositiveSmallIntegerField(choices=RATE_CHOICES)
    likes = models.PositiveIntegerField(default=0)
    unlikes = models.PositiveIntegerField(default=0)

    def __str__(self):
        return self.user.username


class Likes(models.Model):
    user = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name='user_like')
    type_like = models.PositiveSmallIntegerField()
    review = models.ForeignKey(
        Review, on_delete=models.CASCADE, related_name='review_like')
